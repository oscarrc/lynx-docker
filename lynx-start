#!/bin/bash

echo "LYNX DOCKER"
echo "---------------------------------------------------------------------------"
echo "Lynx-Docker: Image by https://oscarrc.me"
echo "---------------------------------------------------------------------------"

sleep 5

echo "SETTING CONFIGURATION"
echo "---------------------------------------------------------------------------"

# Checks if the device is Raspberry Pi
[ "$(grep 'Revision' /proc/cpuinfo)" != "" ] && isPi="1" || isPi="0"

# Sets default configuration file
if [[ isPi -eq 1 ]]; then
    echo "Lynx-Docker: Raspberry Pi detected"
    configfile="/etc/lynx/lynx-pi.conf"
else
    configfile="/etc/lynx/lynx.conf"
fi

# Checks for config file and sets it, otherwise it will use the default
datadir="/lynx" # Default datadir

if [[ -f "${datadir}/lynx.conf" ]]; then
    configfile="${datadir}/lynx.conf"
    echo "Lynx-Docker: Using custom config file."
else
    echo "Lynx-Docker: No config file found. Starting Lynx with default config."
fi

echo "---------------------------------------------------------------------------"
echo "BOOTSTRAPING BLOCKCHAIN DATA"
echo "---------------------------------------------------------------------------"

isTestnet="$(grep -i "^ *testnet=1" ${configfile} | cut -d '=' -f2)"
isBootstrap="$(grep -i "^ *bootstrap=1" ${configfile} | cut -d '=' -f2)"
bootstrap="https://github.com/getlynx/LynxBootstrap/releases/download/$release"
currentDate="$(date +%F)"

# If testnet enabled, then set variables accordingly
if [[ isTestnet -eq 1 ]]; then
    echo "Lynx-Docker: Testnet enabled. Starting with testnet data."
    bootstrap="https://github.com/getlynx/LynxBootstrap/releases/download/$testrelease"
fi

# If bootstrap enabled, then bootstrap
if [[ isBootstrap -ne 0 ]]; then
    rm -rf $datadir/manifest.txt # Remove old manifest
    wget -q $bootstrap/manifest.txt -P $datadir # Download new manifest
    sed -i 's/  /:/' $datadir/manifest.txt # Clean manifest

    # Download bootstrap files
    while IFS= read -r line; do
        hash=$(echo "$line" | cut -d ":" -f 1)
        file=$(echo "$line" | cut -d ":" -f 2)

        if [ -f "/tmp/$file" ]; then
            rm -rf "/tmp/$file"
        fi

        wget "${bootstrap}/${file}" -P /tmp -q --show-progress --progress=bar:force:noscroll

        if [ "$(sha256sum "/tmp/${file}" | awk '{print $1}')" = "$hash" ]; then
            echo "Lynx-Docker: Sanity check - $file hash matches."
        else
            echo "Lynx-Docker: Corrupt bootstrap file"
            exit
        fi
    done < $datadir/manifest.txt

    # Uncompress them
    echo "Lynx-Docker: Extracting files..."
    [ isTestnet == 1 ] && extractdir=testnet$(echo "v4.0-testnet" | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//') || extractdir=$datadir
    cat /tmp/*blocks.tar.gz.* | gunzip | (rm -rf $extractdir/blocks && mkdir -p $extractdir/blocks && cd $extractdir/blocks && tar xf -)
    cat /tmp/*chainstate.tar.gz.* | gunzip | (rm -rf $extractdir/chainstate && mkdir -p $datadir/chainstate && cd $extractdir/chainstate && tar xf -)

    echo "Lynx-Docker: Bootstrap complete."
else
    echo "Lynx-Docker: Bootstrap disabled. Skipping."
fi

echo "---------------------------------------------------------------------------"
echo "CLEANING UP"
echo "---------------------------------------------------------------------------"
rm -rf /tmp/*
echo "Lynx-Docker: Done."

echo "---------------------------------------------------------------------------"
echo "STARTING LYNX"
echo "---------------------------------------------------------------------------"

# Check if log file exists, if not create it
[[ -f "${datadir}/debug.log" ]] || touch $datadir/debug.log

# Show log on stdout
tail -f $datadir/debug.log &
echo "Lynx-Docker: Done. HAVE FUN!"
sleep 1

# Start Lynx using config file
lynxd -conf=$configfile -datadir=$datadir

echo "---------------------------------------------------------------------------" 